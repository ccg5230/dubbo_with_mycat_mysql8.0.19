<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>dubbo-boot2</artifactId>
        <groupId>dubbo-boot</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>dubbo-boot-provider</artifactId>

    <properties>
        <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
        <dubbo.version>2.6.8</dubbo.version>
        <apache-dubbo.version>2.7.3</apache-dubbo.version>
    </properties>

    <dependencies>
        <!-- 引入自定义springboot-starter -->
        <dependency>
            <groupId>my-sping-boot2</groupId>
            <artifactId>exercise-spring-boot-starter</artifactId>
            <version>1.0</version>
            <!--包冲突，排除这个slf4j-log4j12-->
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- 引入 interface 模块 -->
        <dependency>
            <groupId>dubbo-boot</groupId>
            <artifactId>dubbo-boot-interface</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <!-- spring-boot-devtools 热部署  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <!-- -maven中的可选依赖(optional)-->
            <optional>true</optional>
        </dependency>
        <!-- spring默认使用yml中的配置，但有时候要用传统的xml或properties配置 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- 引入阿里巴巴dubbo依赖开始 -->
        <!-- Dubbo Spring Boot Starter -->
        <!--<dependency>-->
            <!--<groupId>com.alibaba.boot</groupId>-->
            <!--<artifactId>dubbo-spring-boot-starter</artifactId>-->
            <!--<version>0.2.1.RELEASE</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>com.alibaba</groupId>-->
            <!--<artifactId>dubbo</artifactId>-->
            <!--<version>${dubbo.version}</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>io.netty</groupId>-->
            <!--<artifactId>netty-all</artifactId>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>org.apache.curator</groupId>-->
            <!--<artifactId>curator-framework</artifactId>-->
            <!--<version>2.12.0</version>-->
        <!--</dependency>-->
        <!-- 引入阿里巴巴dubbo依赖结束 -->

        <!-- 引入apache的dubbo依赖开始 -->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
            <version>${apache-dubbo.version}</version>
        </dependency>
        <!-- 使用zk注册中心，dubbo需要的依赖 -->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-dependencies-zookeeper</artifactId>
            <version>${apache-dubbo.version}</version>
            <type>pom</type>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- 引入apache的dubbo依赖结束 -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <!-- 依赖排除 -->
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 引入hystrix断路器,需要通过maven库找到对应版本
        https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies/ -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
            <version>2.1.4.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.19</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.2</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
<!--        配置日志输出log4j,springboot本身就内置了日志功能-->
<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-starter-logging</artifactId>-->
<!--        </dependency>-->
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.3</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>