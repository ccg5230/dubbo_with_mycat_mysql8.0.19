<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>dubbo-boot2</artifactId>
        <groupId>dubbo-boot</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <packaging>war</packaging>

    <artifactId>dubbo-boot-consumer</artifactId>

    <properties>
        <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
        <dubbo.version>2.6.8</dubbo.version>
        <apache-dubbo.version>2.7.3</apache-dubbo.version>
    </properties>


    <dependencies>
        <!-- 引入 interface 模块 -->
        <dependency>
            <groupId>dubbo-boot</groupId>
            <artifactId>dubbo-boot-interface</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- spring-boot-devtools 热部署  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <!-- -maven中的可选依赖(optional)-->
            <optional>true</optional>
        </dependency>
        <!-- spring默认使用yml中的配置，但有时候要用传统的xml或properties配置 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- 引入阿里巴巴dubbo依赖开始 -->
        <!-- Dubbo Spring Boot Starter -->
        <!--<dependency>-->
        <!--<groupId>com.alibaba.boot</groupId>-->
        <!--<artifactId>dubbo-spring-boot-starter</artifactId>-->
        <!--<version>0.2.1.RELEASE</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>com.alibaba</groupId>-->
        <!--<artifactId>dubbo</artifactId>-->
        <!--<version>${dubbo.version}</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>io.netty</groupId>-->
        <!--<artifactId>netty-all</artifactId>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>org.apache.curator</groupId>-->
        <!--<artifactId>curator-framework</artifactId>-->
        <!--<version>2.12.0</version>-->
        <!--</dependency>-->
        <!-- 引入阿里巴巴dubbo依赖结束 -->

        <!-- 引入apache的dubbo依赖开始 -->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
            <version>${apache-dubbo.version}</version>
        </dependency>
        <!-- 使用zk注册中心，dubbo需要的依赖 -->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-dependencies-zookeeper</artifactId>
            <version>${apache-dubbo.version}</version>
            <type>pom</type>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- 引入apache的dubbo依赖结束 -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <!-- 依赖排除 -->
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 引入hystrix断路器,需要通过maven库找到对应版本
        https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies/ -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
            <version>2.1.4.RELEASE</version>
        </dependency>
        <!-- swagger ui -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <fork>true</fork>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.0</version>
                <configuration>
                    <imageName>spingboot2mycat/${project.artifactId}</imageName>
                    <baseImage>java:8</baseImage>
                    <maintainer>2300470244@qq.com</maintainer>
                    <cmd>["java", "-version"]</cmd>
                    <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/ROOT</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>